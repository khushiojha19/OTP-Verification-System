# -*- coding: utf-8 -*-
"""OTP_Verification_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p04ZuiceUgahyNlWVG_syGmhBBVKgg5n

**Importing of Library**
"""

import random

"""**Steps for the Project are given below:**

**Step 01 : OTP Generation**
"""

''' This step will help to generate a random 6-digit OTP.

    The number is generated between 100000 and 999999.

    Thus, A 6-digit random OTP as a string is generated. '''



def generate_otp():
  otp = f"{random.randint(100000, 999999)}"
  return otp

"""**Step 02 : Sending OTP**"""

DEBUG = True

''' This step will help simulate sending the OTP to the user's email address.

    Args:
        The email (str) will take the user's email address as input and
        the otp (str) will take the generated OTP as input.

    Thus, this function simply prints the OTP for simulation purposes.

    The debug line is used to show the OTP for testing purposes. '''



def send_otp(email, otp):
   print(f" \n OTP has been sent to {email}.")

   if DEBUG:
        print(f" \n DEBUG: The OTP is {otp}")

"""**Step 03 : Input from User & Validation**"""

''' This step will help to prompt the user to enter the OTP they received.

    And the user need to enter the OTP received as string. '''



def get_user_otp():

    return input(" \n Please enter the OTP you received: ")

''' This step will help to check if the entered OTP matches the generated OTP.

    Args:
        The generated_otp (str) will take the generated OTP as input and
        the user_otp (str) will take the OTP entered by the user as input.

    The boolean 'True' is returned if the OTPs match, otherwise 'False' is returned.   '''



def verify_otp(generated_otp, user_otp):

    return generated_otp == user_otp

"""**Step 04 : Main Program**"""

''' This step includes the main function to manage the OTP verification process.

      Step 1: To collect user's email address

      Step 2: To generate the OTP

      Step 3: To simulate sending the OTP

      Step 4: To allow the user to enter and verify OTP (Only 3 attempts allowed)

      Step 5: Main program execution   '''



def main():

  print(" \n\n Welcome to the OTP Verification System! \n ")

  email = input(" \n Enter your email address: ")               # Step 1

  otp = generate_otp()                                      # Step 2

  send_otp(email, otp)                                      # Step 3

  for attempt in range(3):                                  # Step 4
        print(f" \n Attempt {attempt + 1} of 3: \n ")

        user_otp = get_user_otp()

        if verify_otp(otp, user_otp):
            print(" \n Access granted! OTP verified successfully. \n ")

            return

        remaining_attempts = 2 - attempt
        if remaining_attempts > 0:
            print(f" \n Incorrect OTP. You have {remaining_attempts} attempt(s) left. \n ")

        else:
            print(" \n No attempts left. Access denied. \n ")



if __name__ == "__main__":                                  # Step 5
    main()